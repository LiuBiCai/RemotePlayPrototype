using Org.BouncyCastle.Crypto;
using Xunit;
using Ps4RemotePlay.Util;
using Ps4RemotePlay.Protocol.Crypto;

namespace Ps4RemotePlay.Tests
{
    public class CryptoEcdhTests
    {
        readonly byte[] _pubKeyBytes = HexUtil.Unhexlify("044834A2D8F454CD8FBCD8F06DF751A46E3A3C0D0A5EBB2D3AA381C97ACD28FE8F693B6E5E2E58453E5920ED1916BFFB1B53A155E2FBDF537EB7F50FA5969C1762");
        readonly AsymmetricCipherKeyPair _keyPair;

        public CryptoEcdhTests()
        {
            _keyPair = CryptoService.GenerateEcdhKeyPair();
        }

        [Fact]
        public void TestPublicKeyBytesConversion()
        {
            var bytes = Session.GetPublicKeyBytesFromKeyPair(_keyPair);

            Assert.Equal(0x04, bytes[0]);
            Assert.Equal(65, bytes.Length);
        }

        [Fact]
        public void TestKeyDerivation()
        {
            var foreignKeyParams = Session.ConvertPubkeyBytesToCipherParams(_pubKeyBytes);
            var sharedSecret = Session.GenerateSharedSecret(_keyPair.Private, foreignKeyParams);

            Assert.Equal(32, sharedSecret.Length);
        }

        [Fact]
        public void TestEcdh()
        {
            byte[] handshakeKey = { 0xfc, 0x5d, 0x4b, 0xa0, 0x3a, 0x35, 0x3a, 0xbb, 0x6a, 0x7f, 0xac, 0x79, 0x1b, 0x17, 0xbb, 0x34 };
            byte[] localPrivateKey = { 0x16, 0xe7, 0x5d, 0xcb, 0xda, 0x98, 0x55, 0xfb, 0x6b, 0xef, 0xdd, 0x8a, 0xa5, 0xf1, 0x6e, 0x7f, 0x46, 0xfd, 0xe1, 0xd2, 0x27, 0x97, 0x3, 0x60, 0x18, 0x72, 0xd8, 0x4b, 0x15, 0x38, 0xd9, 0x0 };
            byte[] localPublicKey = { 0x4, 0xf4, 0xa, 0xf1, 0x35, 0xa4, 0x88, 0x94, 0x36, 0xce, 0xe5, 0x2b, 0x5c, 0x73, 0xa3, 0x3e, 0xc5, 0xad, 0xb, 0xe0, 0x95, 0x2f, 0x57, 0xf4, 0xf0, 0xed, 0xc, 0x80, 0xb0, 0xbe, 0xda, 0x7c, 0xa6, 0x43, 0x78, 0x93, 0x93, 0xa5, 0x94, 0x7e, 0x9f, 0xaa, 0x3f, 0x67, 0x95, 0xc9, 0xaa, 0x9, 0xa9, 0x63, 0x25, 0xdf, 0xe8, 0x50, 0xbf, 0xc3, 0xf1, 0xdb, 0x62, 0xa5, 0xa, 0xbf, 0xb0, 0xff, 0xf7 };
            byte[] localPublicKeySig = { 0x99, 0xb5, 0xcb, 0xb5, 0x37, 0x18, 0xb, 0xfc, 0x55, 0xda, 0x43, 0x7f, 0x44, 0x76, 0xa8, 0x17, 0xc9, 0x37, 0xfe, 0x56, 0x1b, 0x8a, 0xbe, 0xc, 0x41, 0x12, 0xab, 0x71, 0xf5, 0xa6, 0x8d, 0x29 };
            byte[] remotePublicKey= { 0x4, 0xdf, 0xef, 0x8, 0xbb, 0xa8, 0x56, 0xf2, 0xb4, 0x4b, 0x8a, 0xe, 0x4f, 0x44, 0x20, 0x3f, 0x8e, 0x49, 0x3f, 0xee, 0xd4, 0x3c, 0xe9, 0x3a, 0xfe, 0x5c, 0x64, 0x67, 0x77, 0x20, 0x15, 0x7c, 0x59, 0x10, 0x15, 0x67, 0x94, 0xae, 0x5f, 0x2, 0x4a, 0xad, 0xc, 0xce, 0xfa, 0x14, 0x15, 0xa, 0xab, 0xee, 0x8, 0xb, 0x14, 0x12, 0x76, 0xea, 0x3e, 0xc0, 0xd5, 0x65, 0xf4, 0x68, 0x77, 0xa3, 0xca };
            byte[] secret = { 0xb8, 0x1c, 0x61, 0x46, 0xe7, 0x49, 0x73, 0x8c, 0x96, 0x30, 0xca, 0x13, 0xff, 0x71, 0xe5, 0x9b, 0x3b, 0xf9, 0x41, 0x98, 0xd4, 0x67, 0xa5, 0xa2, 0xbc, 0x78, 0x4, 0x92, 0x81, 0x43, 0xec, 0x1d };


            AsymmetricKeyParameter publicKeyParm = (AsymmetricKeyParameter) Session.ConvertPubkeyBytesToCipherParams(localPublicKey);
            AsymmetricKeyParameter privateKeyParm = (AsymmetricKeyParameter) Session.ConvertPrivatekeyBytesToCipherParams(localPrivateKey);
            AsymmetricCipherKeyPair asymmetricCipherKeyPair = new AsymmetricCipherKeyPair(publicKeyParm, privateKeyParm);

            Assert.Equal(localPublicKey, Session.GetPublicKeyBytesFromKeyPair(asymmetricCipherKeyPair));
            Assert.Equal(localPublicKeySig, Session.CalculateHMAC(handshakeKey, localPublicKey));


            AsymmetricKeyParameter foreignPublicKeyParm = (AsymmetricKeyParameter)Session.ConvertPubkeyBytesToCipherParams(remotePublicKey);
            byte[] sharedSecret = Session.GenerateSharedSecret(privateKeyParm, foreignPublicKeyParm);
            Assert.Equal(32, sharedSecret.Length);
            Assert.Equal(secret, sharedSecret);

        }
    }
}
